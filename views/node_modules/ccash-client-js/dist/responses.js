"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogResponseValidator = exports.LogItemValidator = exports.StringResponseValidator = exports.NumberResponseValidator = exports.ResponseValidator = void 0;
const class_validator_1 = require("class-validator");
class ResponseValidator {
    constructor(response) {
        this.value = response.value;
    }
}
exports.ResponseValidator = ResponseValidator;
class NumberResponseValidator extends ResponseValidator {
}
__decorate([
    class_validator_1.IsInt()
], NumberResponseValidator.prototype, "value", void 0);
exports.NumberResponseValidator = NumberResponseValidator;
class StringResponseValidator extends ResponseValidator {
}
__decorate([
    class_validator_1.IsString()
], StringResponseValidator.prototype, "value", void 0);
exports.StringResponseValidator = StringResponseValidator;
class LogItemValidator {
}
__decorate([
    class_validator_1.IsInt()
], LogItemValidator.prototype, "amount", void 0);
__decorate([
    class_validator_1.IsString()
], LogItemValidator.prototype, "from", void 0);
__decorate([
    class_validator_1.IsString()
], LogItemValidator.prototype, "to", void 0);
__decorate([
    class_validator_1.IsInt()
], LogItemValidator.prototype, "time", void 0);
exports.LogItemValidator = LogItemValidator;
class LogResponseValidator extends ResponseValidator {
}
__decorate([
    class_validator_1.IsArray(),
    class_validator_1.ValidateNested({ each: true })
], LogResponseValidator.prototype, "value", void 0);
exports.LogResponseValidator = LogResponseValidator;
